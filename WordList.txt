class Node: 
    def __init__(self, reference): 
      self.reference = reference # Link to the same object as in the array 
      self.next = None 
class LinkedList: 
    def __init__(self): 
        self.head = None 

    def create_from_array(self, array): 
        if not array: 
            return
 
        self.head = Node(array[0]) 
        current = self.head 

        for i in range(1, len(array)): 
            current.next = Node(array[i]) 
            current = current.next
 
    def display(self): 
        current = self.head 
        print("Linked List (via array references):", end=" ") 
        while current: 
            print(current.reference, end=" -> ") 
            current = current.next 
        print("None")
# Step 1: Get user input for array 
user_input = input("Enter elements separated by spaces: ") 
array = user_input.strip().split() 
# Step 2: Convert each element to an int (if needed) 
array = [int(x) for x in array] 
# Step 3: Create Linked List using references to array elements 
ll = LinkedList() 
ll.create_from_array(array) 

# Step 4: Display both 
print("\nArray:", array) 
ll.display() 

#5. Stack 
class Stack: 
    def __init__(self): 
        self.stack = [] 

    def push(self, value): 
        self.stack.append(value) 
        print(f"Pushed {value} onto the stack.") 

    def pop(self): 
        if self.is_empty(): 
            print("Stack is empty. Cannot pop.") 
        else: 
            popped = self.stack.pop() 
            print(f"Popped {popped} from the stack.")
def peek(self): 
        if self.is_empty(): 
            print("Stack is empty. Nothing to peek.") 
        else: 
            print(f"Top element is: {self.stack[-1]}") 

def display(self): 
        if self.is_empty(): 
            print("Stack is empty.") 
        else: 
            print("Current Stack (top -> bottom):") 
            for item in reversed(self.stack): 
                print(item) 

def is_empty(self): 
    return len(self.stack) == 0
